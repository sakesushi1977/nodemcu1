#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/d64bc0d5-b13e-4c98-8b44-c649573a7f0c 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool led;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#define wifiLed 16 // D0
#define RelayPin1 5  // D2
#define SwitchPin1 0 // D3


int toggleState_1 = 0; // Define integer to remember the toggle state for relay 1


void onRelay1Change();

CloudSwitch relay1;

void initProperties(){

  ArduinoCloud.setBoardId(DEVICE_LOGIN_NAME);
  ArduinoCloud.setSecretDeviceKey(DEVICE_KEY);

  ArduinoCloud.addProperty(relay1, READWRITE, ON_CHANGE, onRelay1Change);

}

WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);

const int debounceDelay = 200; // Debounce delay in milliseconds
unsigned long lastDebounceTime1 = 0;

bool pinstate = LOW;
bool previousSwitchState1 = LOW;
bool SwitchState_1 = LOW; 

void manual_control() {
  unsigned long currentMillis = millis();

  // Manual Switch Control
  /*
  if (digitalRead(SwitchPin1) == LOW && previousSwitchState1 == LOW) {
    if (currentMillis - lastDebounceTime1 >= debounceDelay) {
      toggleState_1 = !toggleState_1;
      digitalWrite(RelayPin1, !toggleState_1);
      relay1 = toggleState_1;
      lastDebounceTime1 = currentMillis;
    }
  }
  previousSwitchState1 = digitalRead(SwitchPin1);
  */
  
   if (digitalRead(SwitchPin1) == LOW && SwitchState_1 == LOW) {
    digitalWrite(RelayPin1, HIGH);
    toggleState_1 = 1;
    SwitchState_1 = HIGH;
    relay1 = toggleState_1;
    Serial.println("Switch-1 on");
  }
  if (digitalRead(SwitchPin1) == HIGH && SwitchState_1 == HIGH) {
    digitalWrite(RelayPin1, LOW);
    toggleState_1 = 0;
    SwitchState_1 = LOW;
    relay1 = toggleState_1;
    Serial.println("Switch-1 off");
  }

  
}


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(3);
  ArduinoCloud.printDebugInfo();

  pinMode(RelayPin1, OUTPUT);
  
  digitalWrite(RelayPin1, LOW); 
   
  pinMode(wifiLed, OUTPUT);

  pinMode(SwitchPin1, INPUT_PULLUP);
 

  digitalWrite(wifiLed, HIGH);

}

void loop() {
  ArduinoCloud.update();
  

  manual_control();

  if (WiFi.status() != WL_CONNECTED) {
    digitalWrite(wifiLed, HIGH);
  } else {
    digitalWrite(wifiLed, LOW);
  }
  
}


/*
  Since Led is READ_WRITE variable, onRelay1Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onRelay1Change() {

  toggleState_1 = relay1;
  Serial.println((String)"Cloud switch state: "+ toggleState_1);

  if (toggleState_1 == 1) {
    // turn relay on
    digitalWrite(RelayPin1, HIGH);
  } else {
    // turn relay off
    digitalWrite(RelayPin1, LOW);
  }
  pinstate = digitalRead(RelayPin1);
  Serial.println((String)"Relay pin state: "+ pinstate);
}
